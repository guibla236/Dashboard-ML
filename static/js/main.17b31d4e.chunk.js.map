{"version":3,"sources":["Components/ContextInputData.jsx","Components/BasicData.jsx","Components/DetailedData.jsx","Components/FilterRange.jsx","Components/FilterBySolder.jsx","Components/FiltersDropdown.jsx","Components/ScatterPlot.jsx","Components/UserDataForm.jsx","Components/PredefinedDataList.jsx","Components/LoadData.jsx","Components/Header.jsx","Components/Main.jsx","App.js","reportWebVitals.js","index.js"],"names":["InputData","React","createContext","input","BasicData","props","data","b","map","sampleElement","Object","keys","forEach","elem","includes","push","getBasicFeatures","rawData","state_base","entry","useState","basicas","setBasicas","colorItem","backgroundColor","item","Card","className","style","onClick","e","variable","console","log","oldBasicas","toggle","Col","Collapse","isOpen","subitem","Button","color","setData","value","query","filter","this","filterDataByBasicFeatures","setRawData","size","DetailedData","c","caract","getDetailedFeatures","state_detailed","first_level","second_level","detalladas","setDetalladas","colorSub","oldData","toggle_basicas","subvariable","toggle_detailed","ssitem","filterDataByDetailedFeatures","filterByRange","typeOfRange","limit","undefined","FilterRange","min","setMin","max","setMax","Input","type","name","id","onChange","target","FilterBySolder","solders","getSolders","setSolder","selected","solder","FiltersDropdown","basicDiv","setBasicDiv","detailedDiv","setDetailedDiv","pesosInterval","setPesosInterval","dollarInterval","setDollarInterval","soldedAmount","setSoldedAmount","Row","sm","CardTitle","CardBody","Plot","useContext","ContextData","dataset","rows","element","point","x","parseInt","ventas","y","pesos","titulo","precio_uy","precio_us","dolares","preProcessData","ResponsiveContainer","width","height","ScatterChart","margin","top","right","bottom","left","CartesianGrid","XAxis","dataKey","unit","YAxis","Tooltip","cursor","strokeDasharray","Scatter","fill","withRouter","onSelectedData","tag","title","CardText","details","history","useHistory","setValues","JSON","parse","Container","PredefinedDataList","Header","Navbar","expand","NavbarBrand","Nav","navbar","UncontrolledDropdown","DropdownToggle","DropdownMenu","DropdownItem","Main","jsonData","setJsonData","Provider","path","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.17b31d4e.chunk.js","sourcesContent":["import React from 'react';\n\nconst InputData = React.createContext({input:''})\n\nexport default InputData;","import { useState } from 'react';\nimport { Card, Collapse, Col, Button } from 'reactstrap';\n\nfunction getBasicFeatures(data) {\n    let b = {}\n    function obtener_caract_bas(sampleElement) {\n        Object.keys(sampleElement[\"caract_bas\"]).forEach((elem) => {\n            if (!Object.keys(b).includes(elem)) {\n                b[elem] = [];\n            }\n            if (!b[elem].includes(sampleElement[\"caract_bas\"][elem])) {\n                b[elem].push(sampleElement[\"caract_bas\"][elem]);\n            }\n        })\n\n    }\n    data.map(obtener_caract_bas);\n    return b;\n}\n\nfunction filterDataByBasicFeatures(data, setData, item, value) {\n    let query = [item, value];\n    function filterFunction(sampleElement) {\n        //sampleElement is the individual article\n        if (sampleElement[\"caract_bas\"][this[0]] === this[1]) {\n            return true;\n        }\n        return false;\n    }\n    setData(data.filter(filterFunction, query));\n}\n\nconst BasicData = (props) => {\n    const data = getBasicFeatures(props.rawData);\n\n    const state_base = {}\n    Object.keys(data).forEach((entry) => {\n        state_base[entry] = false;\n    })\n\n    const [basicas, setBasicas] = useState(state_base);\n\n    const toggle = (variable) => {\n        console.log(\"TOGGLE\")\n        const oldBasicas = { ...basicas }\n        oldBasicas[variable] = !oldBasicas[variable]\n        setBasicas(oldBasicas)\n    };\n    \n    const colorItem = { backgroundColor: 'lightgray' }\n\n    return (\n        Object.keys(data).map((item) => {\n            return (\n                <div key={item}>\n                    <Card className=\"capitalize\" style={colorItem} onClick={e => toggle(item)}>\n                        <h6>{item}</h6>\n                    </Card>\n                    <Col>\n                        <Collapse isOpen={basicas[item]}>\n                            {\n                                Object.keys(data[item]).map((subitem) => {\n                                    return (\n                                        <Button key={subitem}\n                                            className=\"capitalize\"\n                                            color=\"secondary\"\n                                            onClick={e => filterDataByBasicFeatures(props.rawData,\n                                                props.setRawData,\n                                                item,\n                                                data[item][subitem])}\n                                            size=\"sm\">\n                                            {data[item][subitem]}\n                                        </Button>\n                                    )\n                                })\n                            }\n                        </Collapse>\n                    </Col>\n                </div>\n            )\n        })\n    )\n}\n\nexport default BasicData;","import { useState } from 'react';\nimport { Button, Card, Collapse, Col } from 'reactstrap';\n\nfunction getDetailedFeatures(data) {\n    /* Creates an object with all the unique keys and values from the data */\n    var c = {}\n    function obtener_caract_det(sampleElement) {\n        Object.keys(sampleElement[\"caract_det\"]).forEach((elem) => {\n            //Selects all the detailed keys of detailed data if they aren't yet\n            if (!Object.keys(c).includes(elem)) {\n                c[elem] = {};\n            }\n            Object.keys(sampleElement[\"caract_det\"][elem]).forEach((caract) => {\n                //Selects all the subkeys of that key if they aren't saved yet\n                if (!Object.keys(c[elem]).includes(caract)) {\n                    c[elem][caract] = [];\n                }\n                //Saves all the values of that key and subkey if they aren't saved yet\n                if (!c[elem][caract].includes(sampleElement[\"caract_det\"][elem][caract])) {\n                    c[elem][caract].push(sampleElement[\"caract_det\"][elem][caract]);\n                }\n            })\n        })\n    }\n    data.map(obtener_caract_det);\n    return c;\n}\n\nfunction filterDataByDetailedFeatures(data, setData, item, subitem, value) {\n    let query = [item, subitem, value];\n    function filterFunction(sampleElement) {\n        //sampleElement is the individual article\n        if (sampleElement[\"caract_det\"][this[0]][this[1]] === this[2]) {\n            return true;\n        }\n        return false;\n    }\n    setData(data.filter(filterFunction, query));\n}\n\n\nconst DetailedData = (props) => {\n    const data = getDetailedFeatures(props.rawData);\n\n    const state_base = {}\n    const state_detailed = {}\n    Object.keys(data).forEach((first_level) => {\n        state_base[first_level] = false;\n        state_detailed[first_level] = {}\n        Object.keys(data[first_level]).forEach((second_level) => {\n            state_detailed[first_level][second_level] = false;\n        })\n    })\n\n    const [basicas, setBasicas] = useState(state_base);\n    const [detalladas, setDetalladas] = useState(state_detailed);\n\n    const toggle_basicas = (variable) => {\n        const oldData = { ...basicas }\n        oldData[variable] = !oldData[variable]\n        setBasicas(oldData)\n    };\n\n    const toggle_detailed = (variable, subvariable) => {\n        const oldData = { ...detalladas }\n        oldData[variable][subvariable] = !oldData[variable][subvariable]\n        setDetalladas(oldData)\n    };\n\n    const colorItem = { backgroundColor: 'lightgray' }\n    const colorSub = { backgroundColor: 'silver' }\n    \n    return (\n        Object.keys(data).map((item) => {\n            return (\n                <Col key={item}>\n                    <Card className=\"capitalize\" style={colorItem} onClick={e => toggle_basicas(item)}>\n                        <h6>{item}</h6>\n                    </Card>\n\n                    <Col>\n                        <Collapse isOpen={basicas[item]}>\n                            <Col>\n                                {\n                                    Object.keys(data[item]).map((subitem) => {\n                                        return (\n                                            <div key={subitem}>\n                                                <Card className=\"capitalize\" style={colorSub} onClick={e => toggle_detailed(item, subitem)}>\n                                                    <h7>{subitem}</h7>\n                                                </Card>\n\n                                                <Collapse isOpen={detalladas[item][subitem]}>\n                                                    <Col>\n                                                        {\n                                                            Object.keys(data[item][subitem]).map((ssitem) => {\n                                                                return (\n                                                                    <div key={ssitem}>\n                                                                        <Button\n                                                                            color=\"secondary\"\n                                                                            className=\"capitalize\"\n                                                                            size=\"sm\"\n                                                                            onClick={e => filterDataByDetailedFeatures(props.rawData,\n                                                                                props.setRawData,\n                                                                                item,\n                                                                                subitem,\n                                                                                data[item][subitem][ssitem])}>\n                                                                            {data[item][subitem][ssitem]}\n                                                                        </Button>\n                                                                    </div>\n                                                                )\n                                                            })\n                                                        }\n                                                    </Col>\n                                                </Collapse>\n                                            </div>\n                                        )\n                                    })\n                                }\n                            </Col>\n                        </Collapse>\n                    </Col>\n                </Col>\n            )\n        })\n    )\n}\n\nexport default DetailedData;","import { useState } from 'react';\nimport { Input, Button } from 'reactstrap';\n\nfunction filterByRange(data, setData, typeOfRange, limit, value) {\n    if (value === undefined) {\n        return false; //If there is no value inserted in the field, don't do anything.\n    }\n    let variable;\n    switch (typeOfRange) {\n        case \"dollar\":\n            variable = \"dolares\";\n            break;\n        case \"pesos\":\n            variable = typeOfRange;\n            break;\n        case \"amount-solded\":\n            variable = \"ventas\";\n            break;\n        default:\n            console.log(\"Switch with error, check at FilterRange\")\n    }\n\n    const query = [limit, value, variable];\n\n    function filterFunction(sampleElement) {\n        //sampleElement is the individual article\n        if (this[0] === \"min\") {\n            if (sampleElement[this[2]] >= this[1]) {\n                return true;\n            }\n        }\n        if (this[0] === \"max\") {\n            if (sampleElement[this[2]] <= this[1]) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    setData(data.filter(filterFunction, query));\n}\n\nconst FilterRange = (props) => {\n    //Obtener la variable con el props, además del conjunto de datos, tal cual se hacía con los Basic/DetailedData\n    console.log(props.rawData)\n    let [min, setMin] = useState();\n    let [max, setMax] = useState();\n    return (\n        <>\n            <Input type=\"number\"\n                name={\"min-range-\" + props.type}\n                id={\"min-range-\" + props.type}\n                size=\"sm\"\n                onChange={e => setMin(e.target.value)} />\n\n            <Button\n                size=\"sm\"\n                onClick={e => filterByRange(props.rawData,\n                                            props.setRawData,\n                                            props.type,\n                                            \"min\",\n                                            min)}>\n                Asignar mínimo\n            </Button>\n\n            <Input type=\"number\"\n                name={\"max-range-\" + props.type}\n                id={\"max-range-\" + props.type}\n                size=\"sm\"\n                onChange={e => setMax(e.target.value)} />\n\n            <Button\n                size=\"sm\"\n                onClick={e => filterByRange(props.rawData, \n                                            props.setRawData,\n                                            props.type,\n                                            \"max\",\n                                            max)}>\n\n                Asignar máximo\n            </Button>\n        </>\n    )\n    /*\n    return (\n        <Label for=\"select-solder\">\n            <Input type=\"select\" name=\"select-solder\" id=\"select-solder\">\n                <option>1</option>\n                <option>2</option>\n                <option>3</option>\n                <option>4</option>\n                <option>5</option>\n            </Input>\n        </Label>\n    )*/\n}\n\nexport default FilterRange;","import { Input } from 'reactstrap';\n\nfunction getSolders(data) {\n    let b = []\n    function checkSolder(sampleElement) {\n        if (!b.includes(sampleElement[\"vendedor\"])) {\n            b.push(sampleElement[\"vendedor\"]);\n        }\n    }\n\n    data.map(checkSolder);\n    return b;\n}\n\nfunction setSolder(value, data, setData) {\n    if (value===\"Todos\"){\n        return false;\n    }\n    function filterFunction(sampleElement) {\n        //sampleElement is the individual article\n        if (sampleElement[\"vendedor\"] === this) {\n            return true;\n        }\n        return false;\n    }\n\n    setData(data.filter(filterFunction, value));\n}\n\nconst FilterBySolder = (props) => {\n    const solders = getSolders(props.rawData);\n    return (\n        <Input\n            type=\"select\"\n            size=\"sm\"\n            key=\"solder-select\"\n            onChange={e => setSolder(e.target.value, props.rawData, props.setRawData)}>\n            <option selected=\"selected\">Todos</option>\n            {\n                solders.map((solder) => {\n                    return (\n                        <option key={solder}>{solder}</option>\n                    )\n                })\n            }\n\n        </Input>\n    )\n}\n\nexport default FilterBySolder;","import { useState } from 'react';\nimport { Card, Collapse, Row, Col, CardTitle,CardBody } from 'reactstrap';\nimport BasicData from './BasicData.jsx';\nimport DetailedData from './DetailedData.jsx';\nimport FilterRange from './FilterRange.jsx';\nimport FilterBySolder from './FilterBySolder.jsx';\n\nconst FiltersDropdown = (props) => {\n    const [basicDiv, setBasicDiv] = useState(false);\n    const toggleBasic = () => setBasicDiv(!basicDiv);\n\n    const [detailedDiv, setDetailedDiv] = useState(false);\n    const toggleDetailed = () => setDetailedDiv(!detailedDiv);\n\n    const [pesosInterval, setPesosInterval] = useState(false);\n    const togglePesosInterval = () => setPesosInterval(!pesosInterval);\n\n    const [dollarInterval, setDollarInterval] = useState(false);\n    const toggleDollarInterval = () => setDollarInterval(!dollarInterval);\n\n    const [soldedAmount, setSoldedAmount] = useState(false);\n    const toggleSoldedAmount = () => setSoldedAmount(!soldedAmount);\n\n    const [solder, setSolder] = useState(false);\n    const toggleSolder = () => setSolder(!solder);\n\n    const color = { backgroundColor: 'ghostwhite' }\n\n\n    return (\n        <div>\n            <Row sm={5}>\n                <Col sm={5}>\n                    <Card>\n                        <CardTitle><h3>Filtros disponibles</h3></CardTitle>\n                        <CardBody>\n                            <Card onClick={toggleBasic} style={color}>\n                                <h5>Características básicas</h5>\n                            </Card>\n                            <Col>\n                                <Collapse isOpen={basicDiv}>\n                                    <BasicData\n                                        rawData={props.rawData}\n                                        setRawData={props.setRawData} />\n                                </Collapse>\n                            </Col>\n\n                            <Card onClick={toggleDetailed} style={color}>\n                                <h5>Características detalladas</h5>\n                            </Card>\n                            <Collapse isOpen={detailedDiv}>\n                                <DetailedData\n                                    rawData={props.rawData}\n                                    setRawData={props.setRawData} />\n                            </Collapse>\n\n                            <Card onClick={toggleDollarInterval} style={color}>\n                                <h5>Intervalo de precios en dólares</h5>\n                            </Card>\n                            <Collapse isOpen={dollarInterval}>\n                                <FilterRange\n                                    type=\"dollars\"\n                                    rawData={props.rawData}\n                                    setRawData={props.setRawData} />\n                            </Collapse>\n\n                            <Card onClick={togglePesosInterval} style={color}>\n                                <h5>Intervalo de precios en pesos</h5>\n                            </Card>\n                            <Collapse isOpen={pesosInterval}>\n                                <FilterRange\n                                    type=\"pesos\"\n                                    rawData={props.rawData}\n                                    setRawData={props.setRawData} />\n                            </Collapse>\n\n                            <Card onClick={toggleSoldedAmount} style={color}>\n                                <h5>Intervalo de cantidad de ventas</h5>\n                            </Card>\n                            <Collapse isOpen={soldedAmount}>\n                                <FilterRange\n                                    type=\"amount-solded\"\n                                    rawData={props.rawData}\n                                    setRawData={props.setRawData} />\n                            </Collapse>\n\n                            <Card onClick={toggleSolder} style={color}>\n                                <h5>Nombre de usuario del Vendedor</h5>\n                            </Card>\n                            <Collapse isOpen={solder}>\n                                {/* ACÁ HAY QUE GENERAR UN COMPONENTE QUE RECORRA TODOS LOS ELEMENTOS, \n                            EXTRAIGA LOS VENDEDORES, LOS META EN EL SELECT Y MANEJE LA SELECCIÓN DE ELLOS\n                            TAL CUAL SE HIZO CON LOS DE LAS CARACTERÍSTICAS */}\n                                <FilterBySolder\n                                    rawData={props.rawData}\n                                    setRawData={props.setRawData} />\n                            </Collapse>\n                        </CardBody>\n                    </Card>\n\n                </Col>\n            </Row>\n\n        </div>\n\n    );\n}\n//SE HACE CON SELECT LIST, ver \"Bootstrap Select List\" en (https://www.w3schools.com/bootstrap/bootstrap_forms_inputs.asp)\nexport default FiltersDropdown;","import React, { useContext, useState } from 'react';\nimport { ScatterChart, Scatter, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\nimport ContextData from \"./ContextInputData.jsx\";\nimport { Row, Col } from \"reactstrap\";\nimport FiltersDropdown from './FiltersDropdown.jsx';\n\nfunction preProcessData(dataset) {\n    let rows = [];\n    const ordenador = (element) => {\n        const point = {\n            x: parseInt(element.ventas),\n            y: parseInt(element.pesos),\n            titulo: element.titulo,\n            precio_uy: element.pesos,\n            precio_us: element.dolares,\n        }\n        rows.push(point)\n    }\n    dataset.forEach(ordenador);\n    return rows\n}\n\nconst Plot = () => {\n    /*\n        Input data is the data introduced by the user.\n        Raw data is the raw data used for ploting.\n        What is the difference?\n        The raw data could be manipulated with filters \n        (for example: prices between $1000 and $2000)\n        but the input data (saved in the context) don't.\n\n        TLDR: the raw data is mutable, the context don't.\n    */\n\n    let [rawData, setRawData] = useState(useContext(ContextData)[0]);\n    const data = preProcessData(rawData);\n    return (\n        <>\n            <Row>\n                <Col sm={6} className=\"border\">\n                    <ResponsiveContainer width={'100%'} height={500}>\n                        <ScatterChart\n                            margin={{\n                                top: 20,\n                                right: 20,\n                                bottom: 20,\n                                left: 20,\n                            }}\n                        >\n                            <CartesianGrid />\n                            <XAxis \n                                type=\"number\"\n                                dataKey=\"x\"\n                                name=\"Ventas\"\n                                unit=\"\" \n                                />\n\n                            <YAxis\n                                type=\"number\"\n                                dataKey=\"y\"\n                                name=\"Precio\"\n                                unit=\"\"                                \n                                />\n                            <Tooltip cursor={{ strokeDasharray: '3 3' }} />\n                            <Scatter name=\"A school\" data={data} fill=\"#8884d8\" />\n                        </ScatterChart>\n                    </ResponsiveContainer>\n                </Col>\n                <Col sm={6}>\n                    <FiltersDropdown\n                        rawData={rawData}\n                        setRawData={setRawData}\n                    />\n                </Col>\n            </Row>\n            <Row>\n                {/*\n                <Col sm={6} className=\"border\">\n                    <Row>\n                        <Col>\n                            <Input\n                                placeholder=\"Mínimo vertical\"\n                                onChange={e => setRangeData(setMinVert, e.target.value)}\n                            />\n                        </Col>\n\n                        <Col>\n                            <Input\n                                placeholder=\"Máximo vertical\"\n                                onChange={e => setRangeData(setMaxVert, e.target.value)}\n                            />\n                        </Col>\n\n                    </Row>\n\n                    <Row>\n\n                        <Col>\n                            <Input\n                                placeholder=\"Mínimo horizontal\"\n                                onChange={e => setRangeData(setMinHoriz, e.target.value)}\n                            />\n                        </Col>\n\n                        <Col>\n                            <Input\n                                placeholder=\"Máximo horizontal\"\n                                onChange={e => setRangeData(setMaxHoriz, e.target.value)}\n                            />\n                        </Col>\n\n                    </Row>\n                </Col>\n                */}\n                <Col>No utilizado aún</Col>\n            </Row>\n        </>\n    );\n}\n\nexport default Plot;\n","\nimport { useContext } from 'react';\nimport { withRouter } from \"react-router\";\nimport { Card, CardBody, CardTitle, Button } from 'reactstrap';\nimport InputData from './ContextInputData.jsx';\n\nconst UserDataForm = (props) => {\n    const [data, setData] = useContext(InputData)\n    return (\n        <>\n            <Card>\n                <CardTitle>\n                    <hr />\n                Información recolectada\n                <hr />\n                </CardTitle>\n                <Card>\n                    <CardBody>\n                        <textarea\n                            value={data.input}\n                            onChange={e => setData({ input: e.target.value })}\n                            className=\"form-control\"\n                            rows=\"4\">\n                        </textarea>\n                    </CardBody>\n                </Card>\n            </Card>\n            <Button className=\"btn btn-primary\" onClick={() => props.onSelectedData(data.input)}>\n                Utilizar datos\n        </Button>\n        </>\n    )\n}\nexport default withRouter(UserDataForm);","import { withRouter } from \"react-router\"\nimport {\n    Card,\n    CardText,\n    CardTitle,\n    Button,\n} from 'reactstrap';\n\nconst ListOfPredefinedData = (props) => {\n    return (\n        <>\n            <Card>\n                <CardTitle tag=\"h5\">{props.title}</CardTitle>\n                <CardText>{props.details}</CardText>\n                <Button onClick={props.onSelectedData}>Utilizar estos datos</Button>\n            </Card>\n        </>\n    )\n}\n\nexport default withRouter(ListOfPredefinedData);","import React, {useContext} from 'react';\nimport { withRouter, useHistory } from 'react-router-dom';\n\nimport {\n  Container,\n  Row,\n  Col,\n} from 'reactstrap';\n\nimport UserDataForm from \"./UserDataForm.jsx\";\nimport PredefinedDataList from \"./PredefinedDataList.jsx\";\nimport InputData from './ContextInputData.jsx';\n\nconst LoadData = (props) => {\n  let history = useHistory();\n  const setValues = useContext(InputData)[1]\n\n  function onSelectedData(data) {\n    const dataset = JSON.parse(data)\n    setValues(dataset);\n    history.push('/analyse/');\n  }\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <UserDataForm onSelectedData={onSelectedData}/>\n        </Col>\n\n        <Col sm=\"3\" className=\"scroll-list\">\n          <hr />\n\n          <PredefinedDataList\n            title=\"Datos 1\"\n            details=\"Detalles de datos 1\" \n            onSelectedData={onSelectedData} />\n\n          <PredefinedDataList\n            title=\"Datos 2\"\n            details=\"Detalles de datos 2\"\n            onSelectedData={onSelectedData} />\n\n          <PredefinedDataList \n           title=\"Datos 3\"\n           details=\"Detalles de datos 3\"\n           onSelectedData={onSelectedData} />\n\n          <PredefinedDataList\n           title=\"Datos 4\" \n           details=\"Detalles de datos 4\"\n           onSelectedData={onSelectedData} />\n          <hr />\n        </Col>\n      </Row>\n\n\n\n    </Container>\n  );\n}\n\n\nexport default withRouter(LoadData);","import React from 'react';\nimport {\n    DropdownItem,\n    DropdownToggle,\n    NavbarBrand,\n    UncontrolledDropdown,\n    Navbar,\n    DropdownMenu,\n    Nav\n} from 'reactstrap';\n\nconst Header = () => {\n    return (\n        <div>\n            <Navbar color=\"dark\" expand=\"md\">\n                <NavbarBrand>Dashboard MeLi</NavbarBrand>\n                <Nav className=\"mr-auto\" navbar>\n                </Nav>\n                <UncontrolledDropdown>\n                    <DropdownToggle>\n                        Options\n                    </DropdownToggle>\n                    <DropdownMenu>\n                        <DropdownItem>Item 1</DropdownItem>\n                        <DropdownItem>Item 2</DropdownItem>\n                        <DropdownItem>Item 3</DropdownItem>\n                    </DropdownMenu>\n                </UncontrolledDropdown>\n            </Navbar>\n        </div>\n    )\n\n}\n\nexport default Header;","import React, { useState } from \"react\";\nimport Plot from \"./ScatterPlot.jsx\";\nimport InputData from \"./ContextInputData.jsx\";\nimport LoadData from \"./LoadData.jsx\";\nimport Header from \"./Header.jsx\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\n\nfunction Main() {\n    const [jsonData, setJsonData] = useState({input:''});\n\n    return (\n        <InputData.Provider value={[jsonData, setJsonData]}>\n            <Router>\n                <div className=\"App\">\n                    <Header />\n                    <Switch>\n                        <Route path=\"/analyse/\">\n                            <Plot />\n                        </Route>\n                        <Route path=\"/\">\n                            <LoadData />\n                        </Route>\n                    </Switch>\n                </div>\n            </Router>\n        </InputData.Provider>\n    )\n}\n\nexport default Main;","\nimport './App.css';\n\nimport React from \"react\";\nimport Main from \"./Components/Main\"\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App(){\n  return(\n    <Main/>\n  )\n}\n\n/*\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      options: {\n        chart: {\n          id: \"basic-bar\"\n        },\n        xaxis: {\n          categories: [1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999]\n        }\n      },\n      series: [\n        {\n          name: \"series-1\",\n          data: [30, 40, 45, 50, 49, 60, 70, 91]\n        }\n      ]\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"row\">\n          <div className=\"mixed-chart\">\n            <Chart\n              options={this.state.options}\n              series={this.state.series}\n              type=\"bar\"\n              width=\"500\"\n            />\n            <CSVReader \n              onFileLoaded={(data, fileInfo) => console.dir(data, fileInfo)} \n              label=\"Ingrese el archivo con los datos\"\n              />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}*/\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}