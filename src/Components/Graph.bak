import React, { useContext, useState } from "react"
import { useHistory } from 'react-router-dom';
//import Chart from "react-apexcharts"
import ContextData from "./ContextInputData.jsx"
import { Button, Row, Col, Input, Container } from 'reactstrap';
import ExploreDataset from "./ExploreDataset.jsx";

function preProcessData(dataset) {
  let rows = [];
  const ordenador = (element) => {
    const point = 
        {
          x: parseInt(element.ventas),
          y: parseInt(element.pesos),
          titulo: element.titulo,
          precio_uy: element.pesos,
          precio_us: element.dolares,
        }
    rows.push(point)
  }
  dataset.forEach(ordenador);
  return rows
}



function Plot(props) {
  let history = useHistory();
  let [min_horiz, setMinHoriz] = useState(undefined)
  let [max_horiz, setMaxHoriz] = useState(undefined)
  let [min_vert, setMinVert] = useState(undefined)
  let [max_vert, setMaxVert] = useState(undefined)

  function goHome() {
    history.push("/");
  }
  function setRangeData(setFunc, data) {
    setFunc(parseInt(data));
  }

  if (props.values.input === "" || props.values === undefined) {
    return (
      <div>
        <hr />
        No hay datos
        <hr />
        <Button onClick={goHome}>Volver a la página inicial</Button>
      </div>
    )
  }
  else {
    const series = preProcessData(props.values);
    /*
    console.log("series")
    console.log(series)*/
    const options = {
      chart: {
        type: 'scatter',
        zoom: {
          enabled: true,
          type: 'xy'
        },
        events: {
          click(event, chartContext, config) {
            console.log(config.config.series[config.seriesIndex])
            console.log(config.config.series[config.seriesIndex].name)
            console.log(config.config.series[config.seriesIndex].data[config.dataPointIndex])
          }
        }
      },
      xaxis: {
        min: min_horiz,
        max: max_horiz,
        type: 'numeric',
        tickAmount: 10,

      },
      yaxis: {
        min: min_vert,
        max: max_vert,
        type: 'numeric',
        tickAmount: 7,
      },
      legend: {
        show: true,
        formatter: function (seriesName, opts) {
          return seriesName.slice(0, 10) + "..."
        },
        position: 'left',
      },
      tooltip: {
        custom: function ({ series, seriesIndex, dataPointIndex, w }) {
          var data = w.globals.initialSeries[seriesIndex].data[dataPointIndex];
          return (
            '<div class="arrow_box">' +
            "<div>Precio: " + data.y + "</div>" +
            "<div>Ventas: " + data.x + "</div>" +
            "<div>Producto: " + data.titulo + "</div>" +
            "<div>Precio $U: " + parseFloat(data.precio_uy).toFixed(1) + "</div>" +
            "<div>Precio U$S: " + parseFloat(data.precio_us).toFixed(1) + "</div>" +
            "</div>"
          );
        }
      },
      markers: {
        onDblClick: function (e) {
          console.log("DOBLE CLICKEO")
        }
      },
    }

    return (
      <div className="App">
        <Row >
          <Col sm={6} className="border">
            {/*<Chart
              options={options}
              series={series}
              type="scatter"
              width="100%"
            />*/}
          </Col>
          <Col sm={6}>
            Prueba
          </Col>
        </Row>
        <Row>
          <Col>
            <Row>

              <Col>
                <Input 
                  placeholder="Mínimo vertical" 
                  onChange={e => setRangeData(setMinVert, e.target.value)}
                  />
              </Col>

              <Col>
                <Input 
                  placeholder="Máximo vertical"
                  onChange={e => setRangeData(setMaxVert, e.target.value)}
                  />
              </Col>

            </Row>

            <Row>

              <Col>
                <Input
                  placeholder="Mínimo horizontal"
                  onChange={e => setRangeData(setMinHoriz, e.target.value)}
                />
              </Col>
              
              <Col>
                <Input
                  placeholder="Máximo horizontal"
                  onChange={e => setRangeData(setMaxHoriz, e.target.value)}
                />
              </Col>

            </Row>
          </Col>
          <Col>No utilizado</Col>
        </Row>
      </div>

    )
  }

}
function Graph() {
  const values = useContext(ContextData)[0];
  //console.log(values);

  return (
    <div>
      <Row className="border">
        <Col className="border">
          <Plot values={values} />
        </Col>
      </Row>
    </div>
  )
}

export default Graph;